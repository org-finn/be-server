name: CD for Canary Deployment

on:
  # 수동 실행 옵션(main에 푸시되어도 자동으로 실행되지 않음)
  workflow_dispatch:
    inputs:
      duration:
        description: '배포 총 소요 시간 (시간 단위)'
        required: true
        default: '9'

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Define image name and tag
        run: |
          REPO_NAME=$(echo "${{ github.event.repository.name }}" | tr '[:upper:]' '[:lower:]')
          IMAGE_NAME="${{ secrets.DOCKERHUB_USERNAME }}/${REPO_NAME}:${{ github.sha }}"
          echo "IMAGE_NAME=${IMAGE_NAME}" >> $GITHUB_ENV

      - name: Build and push image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ env.IMAGE_NAME }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Create new Launch Template Version
        id: create_lt_version
        run: |
          # 1. 최신 버전의 시작 템플릿에서 현재 User Data를 가져옵니다 (Base64 인코딩 상태).
          BASE64_USER_DATA=$(aws ec2 describe-launch-template-versions \
            --launch-template-id ${{ secrets.LAUNCH_TEMPLATE_ID }} \
            --versions '$Latest' \
            --query "LaunchTemplateVersions[0].LaunchTemplateData.UserData" \
            --output text)
          DECODED_USER_DATA=$(echo "$BASE64_USER_DATA" | base64 --decode)

          # --- ⭐️ 디버깅 로그 (유지 권장) ⭐️ ---
          echo "--- User Data Before Replacement ---"
          echo "$DECODED_USER_DATA"
          echo "------------------------------------"
          echo "Image Tag to be inserted: ${IMAGE_NAME}" # $IMAGE_NAME 사용 확인
          echo "------------------------------------"

          # ⭐️ 2. 정규식을 사용하여 이미지 태그 부분을 교체합니다.
          # 이미지 태그 내의 '/' 문자를 '\/'로 이스케이프 처리합니다.
          ESCAPED_IMAGE_NAME=$(echo "${IMAGE_NAME}" | sed 's/\//\\\//g')

          # 더 명확한 sed 패턴을 사용합니다. 구분자도 '@'로 변경합니다.
          #    'export SPRING_APP_IMAGE="' 로 시작하고 '"'로 끝나는 줄을 찾습니다.
          MODIFIED_USER_DATA=$(echo "$DECODED_USER_DATA" | sed "s@^export SPRING_APP_IMAGE=\".*\"@export SPRING_APP_IMAGE=\"${ESCAPED_IMAGE_NAME}\"@g")
          
          # --- ⭐️ 디버깅 로그 (유지 권장) ⭐️ ---
          echo "--- User Data After Replacement ---"
          echo "$MODIFIED_USER_DATA"
          echo "-----------------------------------"

          # 4. 수정된 User Data를 다시 Base64로 인코딩합니다.
          NEW_BASE64_USER_DATA=$(echo "$MODIFIED_USER_DATA" | base64 -w 0)

          # 5. 수정된 User Data를 담아 새 시작 템플릿 버전을 생성합니다.
          FULL_RESPONSE=$(aws ec2 create-launch-template-version \
            --launch-template-id ${{ secrets.LAUNCH_TEMPLATE_ID }} \
            --version-description "Image tag ${IMAGE_NAME}" \
            --source-version '$Latest' \
            --launch-template-data '{"UserData": "'"$NEW_BASE64_USER_DATA"'"}')
          
          VERSION=$(echo "$FULL_RESPONSE" | jq -r ".LaunchTemplateVersion.VersionNumber")
          
          if [ -z "$VERSION" ] || [ "$VERSION" == "null" ]; then
            echo "::error::Failed to create new launch template version. Full response: $FULL_RESPONSE"
            exit 1
          fi

          # 6. 방금 생성한 버전을 시작 템플릿의 '기본(Default)' 버전으로 설정합니다.
          aws ec2 modify-launch-template --launch-template-id ${{ secrets.LAUNCH_TEMPLATE_ID }} --default-version $VERSION
          
          echo "Successfully created and set Launch Template Version: $VERSION as default"
          echo "lt_version=$VERSION" >> "$GITHUB_OUTPUT"

      - name: Start Step Functions execution
        run: |
          SFN_INPUT=$(jq -n \
            --arg duration "${{ github.event.inputs.duration }}" \
            --arg lt_version "${{ steps.create_lt_version.outputs.lt_version }}" \
            --arg image_tag "${{ env.IMAGE_NAME }}" \
            '{ "total_duration_hours": ($duration | tonumber), "launchTemplateVersion": ($lt_version | tonumber), "imageTag": $image_tag }')
          aws stepfunctions start-execution \
            --state-machine-arn "${{ secrets.STATE_MACHINE_ARN }}" \
            --input "$SFN_INPUT"